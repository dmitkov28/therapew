/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'
import { Route as ProtectedSpeechToTextIndexImport } from './routes/_protected/speech-to-text/index'
import { Route as ProtectedClientsIndexImport } from './routes/_protected/clients/index'
import { Route as ProtectedClientsAddImport } from './routes/_protected/clients/add'
import { Route as ProtectedSessionsSessionIdIndexImport } from './routes/_protected/sessions/$sessionId/index'
import { Route as ProtectedClientsClientIdIndexImport } from './routes/_protected/clients/$clientId/index'
import { Route as ProtectedClientsClientIdEditIndexImport } from './routes/_protected/clients/$clientId/edit/index'

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedSpeechToTextIndexRoute = ProtectedSpeechToTextIndexImport.update(
  {
    id: '/speech-to-text/',
    path: '/speech-to-text/',
    getParentRoute: () => ProtectedRoute,
  } as any,
)

const ProtectedClientsIndexRoute = ProtectedClientsIndexImport.update({
  id: '/clients/',
  path: '/clients/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedClientsAddRoute = ProtectedClientsAddImport.update({
  id: '/clients/add',
  path: '/clients/add',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedSessionsSessionIdIndexRoute =
  ProtectedSessionsSessionIdIndexImport.update({
    id: '/sessions/$sessionId/',
    path: '/sessions/$sessionId/',
    getParentRoute: () => ProtectedRoute,
  } as any)

const ProtectedClientsClientIdIndexRoute =
  ProtectedClientsClientIdIndexImport.update({
    id: '/clients/$clientId/',
    path: '/clients/$clientId/',
    getParentRoute: () => ProtectedRoute,
  } as any)

const ProtectedClientsClientIdEditIndexRoute =
  ProtectedClientsClientIdEditIndexImport.update({
    id: '/clients/$clientId/edit/',
    path: '/clients/$clientId/edit/',
    getParentRoute: () => ProtectedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_protected/clients/add': {
      id: '/_protected/clients/add'
      path: '/clients/add'
      fullPath: '/clients/add'
      preLoaderRoute: typeof ProtectedClientsAddImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/clients/': {
      id: '/_protected/clients/'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ProtectedClientsIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/speech-to-text/': {
      id: '/_protected/speech-to-text/'
      path: '/speech-to-text'
      fullPath: '/speech-to-text'
      preLoaderRoute: typeof ProtectedSpeechToTextIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/clients/$clientId/': {
      id: '/_protected/clients/$clientId/'
      path: '/clients/$clientId'
      fullPath: '/clients/$clientId'
      preLoaderRoute: typeof ProtectedClientsClientIdIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/sessions/$sessionId/': {
      id: '/_protected/sessions/$sessionId/'
      path: '/sessions/$sessionId'
      fullPath: '/sessions/$sessionId'
      preLoaderRoute: typeof ProtectedSessionsSessionIdIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/clients/$clientId/edit/': {
      id: '/_protected/clients/$clientId/edit/'
      path: '/clients/$clientId/edit'
      fullPath: '/clients/$clientId/edit'
      preLoaderRoute: typeof ProtectedClientsClientIdEditIndexImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedClientsAddRoute: typeof ProtectedClientsAddRoute
  ProtectedClientsIndexRoute: typeof ProtectedClientsIndexRoute
  ProtectedSpeechToTextIndexRoute: typeof ProtectedSpeechToTextIndexRoute
  ProtectedClientsClientIdIndexRoute: typeof ProtectedClientsClientIdIndexRoute
  ProtectedSessionsSessionIdIndexRoute: typeof ProtectedSessionsSessionIdIndexRoute
  ProtectedClientsClientIdEditIndexRoute: typeof ProtectedClientsClientIdEditIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedClientsAddRoute: ProtectedClientsAddRoute,
  ProtectedClientsIndexRoute: ProtectedClientsIndexRoute,
  ProtectedSpeechToTextIndexRoute: ProtectedSpeechToTextIndexRoute,
  ProtectedClientsClientIdIndexRoute: ProtectedClientsClientIdIndexRoute,
  ProtectedSessionsSessionIdIndexRoute: ProtectedSessionsSessionIdIndexRoute,
  ProtectedClientsClientIdEditIndexRoute:
    ProtectedClientsClientIdEditIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/clients/add': typeof ProtectedClientsAddRoute
  '/clients': typeof ProtectedClientsIndexRoute
  '/speech-to-text': typeof ProtectedSpeechToTextIndexRoute
  '/clients/$clientId': typeof ProtectedClientsClientIdIndexRoute
  '/sessions/$sessionId': typeof ProtectedSessionsSessionIdIndexRoute
  '/clients/$clientId/edit': typeof ProtectedClientsClientIdEditIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/clients/add': typeof ProtectedClientsAddRoute
  '/clients': typeof ProtectedClientsIndexRoute
  '/speech-to-text': typeof ProtectedSpeechToTextIndexRoute
  '/clients/$clientId': typeof ProtectedClientsClientIdIndexRoute
  '/sessions/$sessionId': typeof ProtectedSessionsSessionIdIndexRoute
  '/clients/$clientId/edit': typeof ProtectedClientsClientIdEditIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/clients/add': typeof ProtectedClientsAddRoute
  '/_protected/clients/': typeof ProtectedClientsIndexRoute
  '/_protected/speech-to-text/': typeof ProtectedSpeechToTextIndexRoute
  '/_protected/clients/$clientId/': typeof ProtectedClientsClientIdIndexRoute
  '/_protected/sessions/$sessionId/': typeof ProtectedSessionsSessionIdIndexRoute
  '/_protected/clients/$clientId/edit/': typeof ProtectedClientsClientIdEditIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/clients/add'
    | '/clients'
    | '/speech-to-text'
    | '/clients/$clientId'
    | '/sessions/$sessionId'
    | '/clients/$clientId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/clients/add'
    | '/clients'
    | '/speech-to-text'
    | '/clients/$clientId'
    | '/sessions/$sessionId'
    | '/clients/$clientId/edit'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_protected/clients/add'
    | '/_protected/clients/'
    | '/_protected/speech-to-text/'
    | '/_protected/clients/$clientId/'
    | '/_protected/sessions/$sessionId/'
    | '/_protected/clients/$clientId/edit/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/clients/add",
        "/_protected/clients/",
        "/_protected/speech-to-text/",
        "/_protected/clients/$clientId/",
        "/_protected/sessions/$sessionId/",
        "/_protected/clients/$clientId/edit/"
      ]
    },
    "/_protected/clients/add": {
      "filePath": "_protected/clients/add.tsx",
      "parent": "/_protected"
    },
    "/_protected/clients/": {
      "filePath": "_protected/clients/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/speech-to-text/": {
      "filePath": "_protected/speech-to-text/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/clients/$clientId/": {
      "filePath": "_protected/clients/$clientId/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/sessions/$sessionId/": {
      "filePath": "_protected/sessions/$sessionId/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/clients/$clientId/edit/": {
      "filePath": "_protected/clients/$clientId/edit/index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
